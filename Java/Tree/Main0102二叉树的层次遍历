package tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

// 102层序遍历、103锯齿(ZigZag)、515层最大值、637层平均值、
// 199二叉树的右视图
public class Main0102二叉树的层次遍历 {
	public static void main(String[] args) {
		TreeNode root = new TreeNode(3);
		TreeNode node1 = new TreeNode(9);
		TreeNode node2 = new TreeNode(20);
		TreeNode node3 = new TreeNode(15);
		TreeNode node4 = new TreeNode(7);
		root.left = node1;
		root.right = node2;
		node2.left = node3;
		node2.right = node4;
		List<List<Integer>> list = new Solution102().levelOrder(root);
		for (List<Integer> list2 : list) {
			System.out.println(list2);
		}
	}
}

// 递归
class Solution102 {
	List<List<Integer>> output = new ArrayList<>();

	public List<List<Integer>> levelOrder(TreeNode root) {
		if (root == null)
			return output;
		levelOrder(root, 0);
		return output;
	}

	public void levelOrder(TreeNode root, int level) {
		if (output.size() == level)
			output.add(new ArrayList<>());
		output.get(level).add(root.val);
		if (root.left != null)
			levelOrder(root.left, level + 1);
		if (root.right != null)
			levelOrder(root.right, level + 1);
	}
}

// 迭代
class Solution0102 {
	public List<List<Integer>> levelOrder(TreeNode root) {
		List<List<Integer>> output = new ArrayList<>();
		if (root == null)
			return output;
		
		Queue<TreeNode> queue = new LinkedList<>();// 注
		queue.add(root);
		int level = 0;
		while (!queue.isEmpty()) {
			output.add(new ArrayList<>());
			int length = queue.size();
			for (int i = 0; i < length; i++) {
				TreeNode cur = queue.poll();
				output.get(level).add(cur.val);
				if (cur.left != null)
					queue.add(cur.left);
				if (cur.right != null)
					queue.add(cur.right);
			}
			level++;
		}
		return output;
	}
}
