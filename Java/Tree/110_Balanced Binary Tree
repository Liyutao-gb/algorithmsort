Leetcode  110  平衡二叉树
 55.（2）平衡二叉树（Balanced Binary Tree）
输入一棵二叉树的根结点，判断该树是不是平衡二叉树。如果某二叉树中任意
结点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。

输入：[3,9,20,null,null,15,7]
    3
   /   \
  9  20
      /   \
   15    7
输出：true 

求解二叉树深度代码中加入平衡树的判断。每个节点遍历一次，二叉树的深度的
改进版。
注：空树是平衡二叉树。

代码如下：
package com.lyt.java;

public class Offer55_BalancedBinaryTree {
	public class TreeNode {
		int val = 0;
		TreeNode left = null;
		TreeNode right = null;

		public TreeNode(int val) {
			this.val = val;
		}
	}

	/**
	 * 每个节点遍历一次解法。空树是平衡二叉树。
	 */
	boolean ans = true;

	public boolean isBalanced(TreeNode root) {
		height(root);
		return ans;
	}

	public int height(TreeNode root) {
		if (root == null)
			return 0;
		int left = height(root.left);
		int right = height(root.right);
		if (Math.abs(left - right) > 1)
			ans = false;
		return Math.max(left, right) + 1;
	}
}
