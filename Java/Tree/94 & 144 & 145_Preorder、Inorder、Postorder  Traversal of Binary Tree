Leetcode  94 144 145
二叉树的前序遍历、中序遍历、后序遍历（Binary Tree Preorder/ 
Inorder/Postorder  Traversal）

前序遍历顺序为根、左、右；中序遍历顺序为左、根、右；后序遍历顺序为左、右、
根。各有递归和非递归两种遍历。
前序遍历和中序遍历需要一个辅助栈；后序遍历需要两个辅助栈。

代码如下：
package tree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

// 中序遍历
class Solution0144 {
	public void preorderTraversal(TreeNode root) {
		
		Stack<TreeNode> stack = new Stack<>();
		
		TreeNode cur = root;
		while (cur != null || !stack.isEmpty()) {
			while (cur != null) {
				System.out.println(cur.val + " ");
				stack.push(cur);
				cur = cur.left;
			}
			cur = stack.pop();
			cur = cur.right;
		}
	}
}

// 递归
class Solution144 {
	public List<Integer> preorderTraversal(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		preorderTraversal(root, list);
		return list;
	}

	public void preorderTraversal(TreeNode root, List<Integer> list) {
		if (root == null)
			return;
		list.add(root.val);
		preorderTraversal(root.left, list);
		preorderTraversal(root.right, list);
	}
}

// 前序遍历
package tree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

// 迭代
class Solution094 {
	public void inorderTraversal(TreeNode root) {
		
		Stack<TreeNode> stack = new Stack<>();
		TreeNode cur = root;
		while (cur != null || !stack.isEmpty()) {
			while (cur != null) {
				stack.push(cur);
				cur = cur.left;
			}
			cur = stack.pop();
			System.out.println(cur.val + " ");
			cur = cur.right;
		}
	}
}

// 递归
class Solution94 {
	public List<Integer> inorderTraversal(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		inorderTraversal(root, list);
		return list;
	}

	public void inorderTraversal(TreeNode root, List<Integer> list) {
		if (root == null)
			return;
		inorderTraversal(root.left, list);
		list.add(root.val);
		inorderTraversal(root.right, list);
	}
}

class Solution0094 {
	public void inorderTraversal(TreeNode root) {
		if (root == null)
			return;
		inorderTraversal(root.left);
		System.out.println(root.val);
		inorderTraversal(root.right);
	}
}

// 后序遍历
package tree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

class Solution145 {
	public void postorderTraversal(TreeNode root) {
		
		Stack<TreeNode> stack1 = new Stack<>();
		Stack<TreeNode> stack2 = new Stack<>();
		
		stack1.push(root);
		while (!stack1.isEmpty()) {
			TreeNode cur = stack1.pop();
			stack2.push(cur);
			if (cur.left != null)
				stack1.push(cur.left);
			if (cur.right != null)
				stack1.push(cur.right);
		}
		
		while (!stack2.empty()) {
			System.out.println(stack2.pop().val  + " ");
		}
	}
}

class Solution0145 {
	public void postorderTraversal(TreeNode root) {
		if (root == null)
			return;
		postorderTraversal(root.left);
		System.out.println(root.val);
		postorderTraversal(root.right);
	}
}
