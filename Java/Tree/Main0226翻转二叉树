package tree;

import java.util.LinkedList;
import java.util.Queue;

public class Main0226翻转二叉树 {
	public static void main(String[] args) {

	}
}

class Solution226 {
	public TreeNode invertTree(TreeNode root) {
		if (root == null)
			return null;
		TreeNode left = invertTree(root.right);
		TreeNode right = invertTree(root.left);
		root.left = left;
		root.right = right;
		return root;
	}
}

class Solution0226 {
	public TreeNode invertTree(TreeNode root) {
		if (root == null)
			return null;
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			TreeNode cur = queue.poll();
			TreeNode temp = cur.left; // temp：临时结点
			cur.left = cur.right;
			cur.right = temp;
			if (cur.left != null)
				queue.add(cur.left);
			if (cur.right != null)
				queue.add(cur.right);
		}
		return root;
	}
}

// 无返回值
class Solution00226 {
	public void mirror(TreeNode root) {
		if (root == null)
			return;
		if (root.left == null && root.right == null)
			return;

		TreeNode temp = root.left;
		root.left = root.right;
		root.right = temp;

		if (root.left != null)
			mirror(root.left);
		if (root.right != null)
			mirror(root.right);
	}
}
