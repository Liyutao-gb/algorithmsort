package tree;

public class Main0572另一个树的子树 {
	public static void main(String[] args) {
		TreeNode root1 = new TreeNode(1);
		TreeNode node1 = new TreeNode(2);
		TreeNode node2 = new TreeNode(3);
		root1.left = node1;
		root1.right = node2;
		TreeNode root2 = new TreeNode(1);
		TreeNode node3 = new TreeNode(2);
		root2.left = node3;
		boolean b = new Solution572().isSubtree(root1, root2);
		System.out.println(b);
	}
}

// 另一个树的子树
class Solution572 {
	public boolean isSubtree(TreeNode s, TreeNode t) {
		if (s == null)
			return false;
		if (t == null)
			return true;
		return isSame(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);
	}

	public boolean isSame(TreeNode s, TreeNode t) {
		if (s == null && t == null)
			return true;
		if (s == null || t == null)
			return false;
		if(s.val != t.val)
			return false;
		return isSame(s.left, t.left) && isSame(s.right, t.right);
	}
}

// 含有另一个树的拓扑结构
class Solution0572 {
	public boolean isSubtree(TreeNode s, TreeNode t) {
		if (t == null)
			return true;
		if (s == null)
			return false;
		return isSame(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);
	}

	private boolean isSame(TreeNode s, TreeNode t) {
		if (t == null)
			return true;
		if (s == null)
			return false;
		if (s.val != t.val)
			return false;
		return isSame(s.left, t.left) && isSame(s.right, t.right);
	}
}
