package tree;

import java.util.LinkedList;
import java.util.Queue;

public class Main0958验证完全二叉树 {
	public static void main(String[] args) {
		TreeNode root = new TreeNode(1);
		TreeNode node1 = new TreeNode(2);
		TreeNode node2 = new TreeNode(3);
		TreeNode node3 = new TreeNode(4);
		root.left = node1;
		root.right = node2;
		node1.left = node3;
		boolean b = new Solution958().isCompleteTree(root);
		System.out.println(b);
	}
}

class Solution958 {
	public boolean isCompleteTree(TreeNode root) {
		if (root == null)
			return true;

		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		boolean flag = false;
		while (!queue.isEmpty()) {
			TreeNode cur = queue.poll();
			if (cur == null) {
				flag = true;
				continue;
			}
			if (flag)
				return false;
			queue.add(cur.left);
			queue.add(cur.right);
		}
		return true;
	}
}

class Solution0958 {
	public boolean isCompleteTree(TreeNode root) {
		if (root == null)
			return true;

		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		boolean flag = false;
		while (!queue.isEmpty()) {
			TreeNode cur = queue.poll();
			TreeNode l = cur.left;
			TreeNode r = cur.right;
			if (l == null && r != null)
				return false;
			if (flag && (l != null || r != null))
				return false;

			if (l != null)
				queue.add(l);
			if (r != null)
				queue.add(r);
			else
				flag = true;
		}
		return true;
	}
}
