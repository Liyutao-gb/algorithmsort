package tree;

import java.util.LinkedList;
import java.util.Queue;

// 100相同的树、101对称二叉树、226翻转二叉树、572另一棵树的子树、另一棵树的拓扑结构
public class Main0100相同的树 {
	public static void main(String[] args) {

		TreeNode root1 = new TreeNode(1);
		TreeNode root2 = new TreeNode(1);
		System.out.println(new Solution100().isSameTree(root1, root2));
	}
}

// 递归
class Solution100 {
	public boolean isSameTree(TreeNode p, TreeNode q) {
		if (p == null && q == null)
			return true;
		if (p == null || q == null)
			return false;
		if (p.val != q.val)
			return false;
		return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
	}
}

// 迭代
class Solution0100 {
	public boolean isSameTree(TreeNode p, TreeNode q) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(p);
		queue.add(q);
		while (!queue.isEmpty()) {
			TreeNode node1 = queue.poll();
			TreeNode node2 = queue.poll();
			if (node1 == null && node2 == null)
				continue;
			if (node1 == null || node2 == null)
				return false;
			if (node1.val != node2.val)
				return false;
			queue.add(node1.left);
			queue.add(node2.left);
			queue.add(node1.right);
			queue.add(node2.right);
		}
		return true;
	}
}
