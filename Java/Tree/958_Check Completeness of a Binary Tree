Leetcode  958
验证完全二叉树（Check Completeness of a Binary Tree）
给定一个二叉树，确定它是否是一个完全二叉树。

若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个
数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能
包含 1~ 2h 个节点。）

输入：[1,2,3,4,5,6]
输出：true
解释：最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后
    一层中的所有结点（{4,5,6}）都尽可能地向左。

思路：和层序遍历类似。
1. 设置一个flag标志；
2. 当遇到null值时，如果是完全二叉树，那么队列中剩下的全是null值；
3. 如果遇到第一个null值后，后面还有不是null值的结点，那么就不是完全二
    叉树。
    
代码如下：
package tree;

import java.util.LinkedList;
import java.util.Queue;

public class Main0958CheckCompletenessofaBinaryTree {
	public static void main(String[] args) {
		TreeNode root = new TreeNode(1);
		TreeNode node1 = new TreeNode(2);
		root.left = node1;
		boolean b = new Solution958().isCompleteTree(root);
		System.out.println(b);
	}
}

class Solution958 {
	public boolean isCompleteTree(TreeNode root) {
		if (root == null)
			return true;

		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		boolean flag = false;
		while (!queue.isEmpty()) {
			TreeNode cur = queue.poll();
			if (cur == null) {
				flag = true;
				continue;
			}
			if (flag)
				return false;
			queue.add(cur.left);
			queue.add(cur.right);
		}
		return true;
	}
}

class Solution0958 {
	public boolean isCompleteTree(TreeNode root) {
		if (root == null)
			return true;

		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		boolean flag = false;
		while (!queue.isEmpty()) {
			TreeNode cur = queue.poll();
			TreeNode l = cur.left;
			TreeNode r = cur.right;
			if (l == null && r != null)
				return false;
			if (flag && (l != null || r != null))
				return false;

			if (l != null)
				queue.add(l);
			if (r != null)
				queue.add(r);
			else
				flag = true;
		}
		return true;
	}
}
