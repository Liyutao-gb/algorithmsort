53.（1）数字在排序数组中出现的次数
统计一个数字在排序数组中出现的次数。例如输入排序数组{1, 2, 3, 3,3, 3, 4, 5}和
数字3，由于3在这个数组中出现了4次，因此输出4。

先用二分法找到一个3，没有该数字要抛异常。

1. 二分法查找第一个3（递归、循环版本）
① 如果中间数字的前一个数字也等于3，说明第一个3在前面，继续在前半段
       查找第一个3； 
② 如果中间数字的前一个数字不等于3或当前数字是第一个数字，说明该位置
是第一个3。
2. 查找最后一个3（递归、循环版本）
① 如果中间数字的后一个数字也等于3，说明最后一个3在后面，继续在后半段
查找最后一个3；
② 如果中间数字的后一个数字不等于3或当前数字是最后一个数字，说明该位
置是最后一个3。
时间复杂度：O(logn)

代码如下：
package com.lyt.java;

public class Offer53_NumberOfK {
	public int getNumberOfK(int[] arr, int k) {
		if (arr == null || arr.length <= 0)
			throw new RuntimeException("数组不合法");
		
		int firstK = getFirstK(arr, 0, arr.length - 1, k);
		if (firstK == -1)
			throw new RuntimeException("不存在该数字");
		
		int lastK = getLastK(arr, firstK, arr.length - 1, k);
		return lastK - firstK + 1;
	}

	private int getFirstK(int[] arr, int start, int end, int k) {
		if (start > end)
			return -1;
		
		int mid = (start + end) >> 1;
		if (arr[mid] == k) {
			if (mid == 0 || arr[mid - 1] != k)
				return mid;
			else
				end = mid - 1;
		} else if (arr[mid] < k) {
			start = mid + 1;
		} else {
			end = mid - 1;
		}
		return getFirstK(arr, start, end, k);
	}

	private int getLastK(int[] arr, int start, int end, int k) {
		if (start > end)
			return -1;
		
		int mid = (start + end) >> 1;
		if (arr[mid] == k) {
			if (mid == arr.length - 1 || arr[mid + 1] != k)
				return mid;
			else
				start = mid + 1;
		} else if (arr[mid] < k) {
			start = mid + 1;
		} else {
			end = mid - 1;
		}
		return getLastK(arr, start, end, k);
	}

	public static void main(String[] args) {
		Offer53_NumberOfK demo = new Offer53_NumberOfK();
		int[] arr = { 1, 2, 3, 3, 3, 3, 4, 5 };
		int i = demo.getNumberOfK(arr, 3);
		System.out.println(i);
	}
}
