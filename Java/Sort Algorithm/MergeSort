package sort;

import java.util.Random;

//★归并排序 (分治、递归)  1600ms
//(Tim Sort 改进的归并排序、插入排序) java对象排序专用 
//平均时间复杂度：O(nlogn) 最好：O(nlogn) 最坏：O(nlogn)  空间复杂度：O(n)  稳定
public class MergeSort {
	public static void main(String[] args) {
		int[] arr = { 9, 6, 11, 3, 5, 12, 8, 7, 10, 15, 14, 4, 1, 13, 2 };
		sort(arr, 0, arr.length - 1);
		print(arr);

//		 int[] arr = new int[8000000];
//		 for (int i = 0; i < arr.length; i++) {
//		 arr[i] = new Random().nextInt(100000);
//		 }
//		
//		 long l = System.currentTimeMillis();
//		 sort(arr, 0, arr.length - 1);
//		 long m = System.currentTimeMillis();
//		
//		 System.out.println(m - l);

	}

	public static void sort(int[] arr, int left, int right) {
		if (left == right)
			return;
		int mid = (left + right) / 2;
		sort(arr, left, mid);
		sort(arr, mid + 1, right);
		merge(arr, left, mid, right);
	}

	public static void merge(int[] arr, int left, int mid, int right) {
		int i = left;
		int j = mid + 1;
		int k = 0;

		int[] temp = new int[right - left + 1];

		while (i <= mid && j <= right) {
			temp[k++] = arr[i] <= arr[j] ? arr[i++] : arr[j++];
		}
		while (i <= mid) {
			temp[k++] = arr[i++];
		}
		while (j <= right) {
			temp[k++] = arr[j++];
		}

		for (int k2 = 0; k2 < temp.length; k2++) {
			arr[left++] = temp[k2];
		}

	}

	static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	static void print(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
}
// 5 7
// 2 3
// 2 3 5 7
// 1 4
// 6 8
// 1 4 6 8
// 1 2 3 4 5 6 7 8
