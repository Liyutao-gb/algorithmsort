package stack;

import java.util.Stack;

public class Main0155最小栈 {
	public static void main(String[] args) {
		MinStack stack = new MinStack();
		stack.push(-2);
		stack.push(0);
		stack.push(-3);
		System.out.println(stack.getMin());
		stack.pop();
		System.out.println(stack.top());
		System.out.println(stack.getMin());
	}
}

// 非同步压栈
class MinStack {
	private Stack<Integer> stackData;
	private Stack<Integer> stackMin;

	/** initialize your data structure here. */
	public MinStack() {
		this.stackData = new Stack<Integer>();
		this.stackMin = new Stack<Integer>();
	}

	public void push(int x) {
		this.stackData.push(x);
		if (this.stackMin.isEmpty() || x <= this.getMin()) {
			this.stackMin.push(x);
		}
	}

	public void pop() {
		if (this.stackData.isEmpty())
			throw new RuntimeException("Your stack is empty.");
		int val = this.stackData.pop();
		if (val == this.getMin())
			this.stackMin.pop();
	}

	public int top() {
		if (this.stackData.isEmpty())
			throw new RuntimeException("Your stack is empty.");
		return this.stackData.peek();
	}

	public int getMin() {
		if (this.stackMin.isEmpty())
			throw new RuntimeException("Your stack is empty.");
		return this.stackMin.peek();
	}
}

// 同步压栈
class MinStack1 {
	private Stack<Integer> stackData;
	private Stack<Integer> stackMin;

	/** initialize your data structure here. */
	public MinStack1() {
		this.stackData = new Stack<Integer>();
		this.stackMin = new Stack<Integer>();
	}

	public void push(int x) {
		this.stackData.push(x);
		if (this.stackMin.isEmpty() || x <= this.getMin()) {
			this.stackMin.push(x);
		} else {
			stackMin.push(this.getMin());
		}
	}

	public void pop() {
		if (this.stackData.isEmpty())
			throw new RuntimeException("Your stack is empty.");
		this.stackData.pop();
		this.stackMin.pop();
	}

	public int top() {
		if (this.stackData.isEmpty())
			throw new RuntimeException("Your stack is empty.");
		return this.stackData.peek();
	}

	public int getMin() {
		if (this.stackMin.isEmpty())
			throw new RuntimeException("Your stack is empty.");
		return this.stackMin.peek();
	}
}
