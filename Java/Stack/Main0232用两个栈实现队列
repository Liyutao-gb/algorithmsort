package stack;

import java.util.Stack;

public class Main0232用栈实现队列 {
	public static void main(String[] args) {

	}
}

// 两个栈实现队列
class MyQueue {
	Stack<Integer> stackPush;
	Stack<Integer> stackPop;

	/** Initialize your data structure here. */
	public MyQueue() {
		stackPush = new Stack<Integer>();
		stackPop = new Stack<Integer>();
	}

	/** Push element x to the back of queue. */
	public void push(int x) {
		stackPush.push(x);
	}

	/** Removes the element from in front of queue and returns that element. */
	public int pop() {
		if (stackPop.isEmpty() && stackPush.isEmpty()) {
			throw new RuntimeException("Queue is empty.");
		} else {
			if (stackPop.isEmpty()) {
				while (!stackPush.isEmpty()) {
					stackPop.push(stackPush.pop());
				}
			}
		}
		return stackPop.pop();
	}

	/** Get the front element. */
	public int peek() {
		if (stackPush.isEmpty() && stackPop.isEmpty()) {
			throw new RuntimeException("Queue is empty.");
		} else {
			if (stackPop.isEmpty()) {
				while (!stackPush.isEmpty()) {
					stackPop.push(stackPush.pop());
				}
			}
		}
		return stackPop.peek();
	}

	/** Returns whether the queue is empty. */
	public boolean empty() {
		return stackPop.isEmpty() && stackPush.isEmpty();
	}
}
