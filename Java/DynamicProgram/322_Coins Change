Leetcode  322
换钱的最少货币数（Coin Change）
  给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成
总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
根据需要凑出的金额来进行贪心，但是，如果我们换一组钞票面值，比如：

 输入: coins = [1, 5, 11], amount = 15
输出: 3 
解释: 11 = 5 + 5 + 5。
我们要凑出15的时候， 贪心策略就会出错：
15 = 11 * 1 + 1 * 4 (贪心策略）
15 = 5 * 3（正确策略）

f(n)表示“凑出n所需的最少钞票数量”	　
那么，现在w=15的时候，我们该取那种钞票呢？当然是各种方案中，cost值最低的那一个
- 取11：　cost=f(4)+1=4+1=5　
- 取5： 　 cost = f(10) + 1 = 2 + 1 = 3
- 取1： 　cost = f(14) + 1 = 4 + 1 = 5
显而易见，cost值最低的是取5的方案。我们通过上面三个式子，做出了正确的决策!

f(n) 只与 f(n-1),f(n-5),f(n-11) 相关；	
f(n)=min{f(n-1),f(n-5),f(n-11)}+1

代码如下：
package dynamicprogram;

import java.util.Arrays;

public class Main0322CoinChange {
	public static void main(String[] args) {
		int[] arr = { 1, 5, 11 };
		int amount = 15;
		System.out.println(new Solution322().coinChange(arr, amount));
	}
}

class Solution322 {
	public int coinChange(int[] coins, int amount) {
		int max = amount + 1;
		int[] dp = new int[amount + 1];
		Arrays.fill(dp, max);

		dp[0] = 0; // 0 无法兑换出
		for (int i = 1; i < dp.length; i++) {
			for (int coin : coins) {
				if (i >= coin)
					dp[i] = Math.min(dp[i], dp[i - coin] + 1);
			}
		}

		return dp[amount] == max ? -1 : dp[amount];
	}
}
