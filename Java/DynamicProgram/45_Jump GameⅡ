Leetcode  45
跳跃游戏（Jump GameⅡ）
给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在
该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
   从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

顺藤摸瓜：
1. 贪婪算法，我们每次在可跳范围内选择可以跳的更远的位置。
    如下图，开始的位置是 2，可跳的范围是橙色的。然后因为 3 可以跳的更远，
    所以跳 3 的位置。

2. 如下图，然后现在的位置就是 3 了，能跳的范围是橙色的，然后因为 4 可以
    跳的更远，所以下次跳到 4 的位置。

3. 写代码的话，我们用 end 表示当前能跳的边界，对于上边第一个图的橙色 1，
    第二个图中就是橙色的 4，遍历数组的时候，到了边界，重新更新 新的边界。
4. 这里要注意一个细节，就是 for 循环中，i < nums.length - 1，少了末尾。
    因为开始的时候边界是第 0 个位置，steps 已经加 1 了。如果最后一步刚好
    跳到了末尾，此时 steps 其实不用加 1 了。如果是 i < nums.length，i 遍历
    到最后的时候，会进入 if 语句中，steps 会多加 1。


代码如下：
package dynamicprogram;

public class Main0045JumpGameⅡ {
	public static void main(String[] args) {
		int[] arr = { 2, 3, 1, 1, 4};
		System.out.println(new Solution45().jump(arr));
	}
}

// 每次在可跳范围内选择可以使得跳的更远的位置
class Solution45 {
	public int jump(int[] nums) {
		int end = 0;
		int maxPosition = 0;
		int steps = 0;
		for (int i = 0; i < nums.length - 1; i++) {
			// 找能跳的最远的
			maxPosition = Math.max(maxPosition, nums[i] + i);
			if (i == end) { // 遇到边界，更新边界，并且步数加一
				end = maxPosition;
				steps++;
			}
		}
		return steps;
	}
}
