Leetcode  63
有障碍的不同路径Ⅱ（Unique PathsⅡ）
一个机器人位于一个 m x n 网格的左上角 。机器人每次只能向下或者向右移动一
步。机器人试图达到网格的右下角。现在考虑网格中有障碍物。那么从左上角到右下角
将会有多少条不同的路径？网格中的障碍物和空位置分别用 1 和 0 来表示。

输入:[ [0,0,0],
  	  [0,1,0],
  	  [0,0,0] ]
输出: 2
解释:3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右

算法过程：
1. 如果第一个格点 obstacleGrid[0,0] 是 1，说明有障碍物，那么机器人不能做任
    何移动，返回结果 0；
2. 否则，如果 obstacleGrid[0,0] 是 0，我们初始化这个值为 1 然后继续；
3. 遍历第一行，如果有一个格点初始值为 1 ，说明当前节点有障碍物，没有路径可
    以通过，设值为 0 ；否则设这个值是前一个节点的值 obstacleGrid[i,j] = 
    obstacleGrid[i,j-1]；第一列也是这样；
4. 现在，从 obstacleGrid[1,1] 开始遍历整个数组，如果这个点有障碍物，设值为0，
    这可以保证不会对后面的路径产生贡献。如果某个格点初始不包含任何障碍物，
    就把值赋为上方和左侧两个格点方案数之和 obstacleGrid[i,j] = 
    obstacleGrid[i-1,j] + obstacleGrid[i,j-1]。
    
代码如下：
package dynamicprogram;

public class Main0063UniquePathsⅡ {
	public static void main(String[] args) {
		int[][] matrix = { { 0, 0, 0 }, { 0, 1, 0 }, { 0, 0, 0 } };
		System.out.println(new Solution63().uniquePathsWithObstacles(matrix));
	}
}

class Solution63 {
	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
		if (obstacleGrid[0][0] == 1)
			return 0;

		int R = obstacleGrid.length;
		int C = obstacleGrid[0].length;

		obstacleGrid[0][0] = 1;
		// 值为1意味着有障碍，不能走，所以设置值为0，否则将前一个的值赋到当前位置
		for (int i = 1; i < R; i++) {
			if (obstacleGrid[i][0] == 1)
				obstacleGrid[i][0] = 0;
			else
				obstacleGrid[i][0] = obstacleGrid[i - 1][0];
		}

		for (int i = 1; i < C; i++) {
			if (obstacleGrid[0][i] == 1)
				obstacleGrid[0][i] = 0;
			else
				obstacleGrid[0][i] = obstacleGrid[0][i - 1];
		}

		for (int i = 1; i < R; i++) {
			for (int j = 1; j < C; j++) {
				if (obstacleGrid[i][j] == 1)
					obstacleGrid[i][j] = 0;
				else
					obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
			}
		}
		return obstacleGrid[R - 1][C - 1];
	}
}
