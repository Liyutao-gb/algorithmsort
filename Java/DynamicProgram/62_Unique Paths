Leetcode  62
不同路径（Unique Paths）
一个机器人位于一个 m x n 网格的左上角。机器人每次只能向下或者向右移动一步。
机器人试图达到网格的右下角。

输入: m = 3, n = 2
输出: 3
解释:从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

空间复杂度：O(M + N)
1. 第一行和第一列，可以从(0，0)位置直接到达，所以都置1；
2. 第二行及以后和第二列及以后的走法，来自于上边和左边的走法之和。
空间复杂度：O(N)	dp[i] = dp[i] + dp[i - 1]
1. 定义一个cols大小数组，初始化第一行的值1；
2. 第二行及以后要保存上一行的值。

代码如下：
package dynamicprogram;

public class Main0062UniquePaths {
	public static void main(String[] args) {
		System.out.println(new Solution62().uniquePaths(7, 3));
	}
}

// 空间复杂度：O(m+n)
class Solution62 {
	public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
		
		for (int i = 0; i < n; i++)
			dp[0][i] = 1;
		for (int i = 0; i < m; i++)
			dp[i][0] = 1;

		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
			}
		}
		return dp[m - 1][n - 1];
    }
}

// 空间复杂度：O(n)
class Solution062 {
    public int uniquePaths(int m, int n) {
        int[] dp = new int[n];
        for (int i = 0; i < dp.length; i++)
			dp[i] = 1;
        
        for (int i = 1; i < m;i++){
            for (int j = 1; j < n; j++){
                dp[j] = dp[j] + dp[j-1]; // 上 + 左
            }
        }
        return dp[n-1];
    }
}
