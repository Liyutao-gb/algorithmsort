Leetcode  64  矩阵最小路径和
47.礼物的最大价值（Max Value of Gifts）
  在一个m×n的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值(价值大于0)。
你可以从棋盘的左上角开始拿格子里的礼物，并每次向左或者向下移动一格直到到达棋盘
的右下角。给定一个棋盘及其上面的礼物，请计算你最多能拿到多少价值的礼物？

定义f(i,j)为到达(i,j)位置格子时能拿到的礼物总和的最大值，则有：
f(i,j)=max{f(i,j),f(i,j)}+values(i,j)。

a. 原数组改变：arr(i,j) = arr[i][j] + Math.min(arr[i - 1][j], arr[i][j - 1]);
b. 原数组不变：定义两个临时变量（上、左值），一个一维数组大小为 cols。
    时间复杂度：O(M + N)	空间复杂度：O(M)
    
代码如下：
package dynamicprogram;

class Solution64 {
	public int minPathSum(int[][] grid) {
		if (grid == null || grid.length <= 0)
			return 0;

		int rows = grid.length;
		int cols = grid[0].length;
		for (int i = 1; i < cols; i++) {
			grid[0][i] += grid[0][i - 1];
		}
		for (int i = 1; i < rows; i++) {
			grid[i][0] += grid[i - 1][0];
		}

		for (int i = 1; i < rows; i++) {
			for (int j = 1; j < cols; j++) {
				grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
			}
		}
		return grid[rows - 1][cols - 1];
	}
}


public class Offer47_MaxValueOfGifts {
	public int maxValueOfGifts(int[][] grid) {
		if (grid == null || grid.length <= 0)
			return 0;

		int rows = grid.length;
		int cols = grid[0].length;
		int[] maxValue = new int[cols];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				int left = 0;
				int up = 0;
				if (i > 0)
					up = maxValue[j];
				if (j > 0)
					left = maxValue[j - 1];
				maxValue[j] = Math.max(up, left) + grid[i][j];
			}
		}
		return maxValue[cols - 1];
	}
}

