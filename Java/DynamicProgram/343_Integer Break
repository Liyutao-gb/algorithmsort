Leetcode  343  整数拆分
14.剪绳子（Cutting Rope）
给你一根长度为n绳子，请把绳子剪成m段（m、n都是整数，n＞1并且m＞1）。每
段的绳子的长度记为k[0]、k[1]、……、k[m]。k[0]*k[1]*…*k[m]可能的最大乘积是多少？

例当绳子的长度是8时我们把它剪成长度分别为2、3、3的三段，此时得到最大的乘积18。

动态规划：子问题的最优解存储在数组products里。数组中第i个元素表示把长度
    大乘积记为f(n)，则有：f(n)=max(f(i)*f(n-1))，0<i<n。
    时间复杂度：O(n²)	空间复杂度：O(n)
贪婪算法：尽可能剪出长度为3的绳子，剩下的绳子长度为4时，把绳子剪成2×2
    的绳子。时间复杂度：O(1)		空间复杂度：O(1)
    
代码如下：
package com.lyt.java;

public class Offer14_CuttingRope {
	/**
	 * 动态规划
	// 下面几个不是乘积，因为其本身长度比乘积大
	// 开始从下到上计算长度为i绳子的最大乘积值product[i]
	// 算不同子长度的乘积，找出最大的乘积
	 */
	public int maxProductAfterCutting_solution1(int length) {
        if (length <= 1)
            return 0;
        if (length == 2)
            return 1;
        if (length == 3)
            return 2;
        int[] product = new int[length + 1]; // 用于存放最大乘积值
        product[0] = 0;
        product[1] = 1;
        product[2] = 2;
        product[3] = 3;
 
        for (int i = 4; i <= length; i++) {
            int max = 0;
            for (int j = 1; j <= i / 2; j++) {
            	max = Math.max(max, product[j] * product[i - j]);
            }
            product[i] = max;
        }
        return product[length];
    }
	
	/**
	 * 贪婪算法
	 */
    public int maxProductAfterCutting_solution2(int length) {
        if (length <= 1)
            return 0;
        if (length == 2)
            return 1;
        if (length == 3)
            return 2;
        int timesOf3 = length / 3;
        if (length % 3 == 1) 
            timesOf3--;
        int timesOf2 = (length - timesOf3 * 3) / 2;
        return (int) (Math.pow(3, timesOf3) * Math.pow(2, timesOf2));
    }
 
    // =====测试代码======
    void test(String testName, int length, int expected) {
        if (testName != null)
            System.out.println(testName + ":");
        if (maxProductAfterCutting_solution1(length) == expected) {
            System.out.print("    动态规划:" + "passed  ");
        } else {
            System.out.print("    动态规划:" + "failed  ");
        }
 
        if (maxProductAfterCutting_solution2(length) == expected) {
            System.out.println("贪婪算法:" + "passed  ");
        } else {
            System.out.println("贪婪算法:" + "failed  ");
        }
    }
 
    void test1() {
        test("test1", 1, 0);
    }
 
    void test2() {
        test("test2", 2, 1);
    }
 
    void test3() {
        test("test3", 3, 2);
    }
 
    void test4() {
        test("test4", 4, 4);
    }
 
    void test5() {
        test("test5", 5, 6);
    }
 
    void test6() {
        test("test6", 10, 36);
    }
 
    void test7() {
        test("test7", 50, 86093442);
    }
 
    public static void main(String[] args) {
    	Offer14_CuttingRope demo = new Offer14_CuttingRope();
        demo.test1();
        demo.test2();
        demo.test3();
        demo.test4();
        demo.test5();
        demo.test6();
        demo.test7();
    }
}
