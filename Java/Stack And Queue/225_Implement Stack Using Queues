Leetcode  225  用队列实现栈
（2）用两个队列实现一个栈（Implement Stack Using Queues）
有两个队列queue1和queue2。add()、poll()

1. 添加元素是往一个队列queue1中一直插入；
2. 弹出元素
    ① 如果queue1队列为空，queue2队列不为空，将queue2队列中的元素弹出到
    queue1队列中，queue2队列中最后的一个元素就是要弹出的元素；
    ② 如果queue1不为空，,当用队列模拟出栈时，queue1尾部最后一个元素就是
    要弹出的元素,首先将queue1的元素从队列尾部弹出依次加入到队列queue2中,
    当queue1只剩一个元素时,就是要弹出的元素。
    
代码如下：
package com.lyt.java;

import java.util.LinkedList;
import java.util.Queue;

public class Offer09_StackWithTwoQueues {
	class Stack {
		Queue<Integer> queue1 = new LinkedList<Integer>();
		Queue<Integer> queue2 = new LinkedList<Integer>();

		/**
		 * 插入结点
		 */
		public void push(int node) {
			queue1.add(node);
		}

		/**
		 * 删除结点
		 * 只能判断queue1是否为空
		 */
		public int pop() {
			if (queue1.isEmpty() && queue2.isEmpty()) 
				throw new RuntimeException("当前栈为空");
			
			if (queue1.isEmpty()) {
				while (queue2.size() > 1) {
					queue1.add(queue2.poll());
				}
				return queue2.poll();
			} else {
				while (queue1.size() > 1) {
					queue2.add(queue1.poll());
				}
				return queue1.poll();
			}
		}
	}

	public void test1() {
		Stack stack = new Stack();
		stack.push(1);
		stack.push(2);
		System.out.println(stack.pop());
		stack.push(3);
		System.out.println(stack.pop());
		System.out.println(stack.pop());
	}

	/**
	 * 往空栈删除元素
	 */
	public void test2() {
		Stack stack = new Stack();
		System.out.println(stack.pop());
	}

	public static void main(String[] args) {
		Offer09_StackWithTwoQueues demo = new Offer09_StackWithTwoQueues();
		demo.test1();
		demo.test2();
	}
}
