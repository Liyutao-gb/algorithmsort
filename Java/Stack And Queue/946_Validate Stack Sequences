Leetcode  946  验证栈序列
31.栈的压入、弹出序列（Validate Stack Sequences）
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈
的弹出顺序。假设压入栈的所有数字均不相等。

输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出：true
解释：我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

建立一个辅助栈，按照压栈序列依次进行入栈操作，按出栈序列的顺序依次弹出
数字。在出栈时，若下一个要出栈的数字与栈顶数字相同则弹出。如果压栈序列中的
所有数字都入栈后没有完全出栈成功则代表两个序列不匹配，返回false。


代码如下：
package com.lyt.java;

import java.util.Stack;

public class Offer31_StackPushPopOrder {
	public boolean isPopOrder(int[] pushA, int[] popA) {
		if (pushA == null || popA == null || pushA.length == 0 || popA.length != pushA.length)
			return false;

		Stack<Integer> stack = new Stack<Integer>();
		int popIndex = 0;
		for (int i = 0; i < pushA.length; i++) {
			stack.push(pushA[i]);
			while (!stack.empty() && stack.peek() == popA[popIndex]) {
				stack.pop();
				popIndex++;
			}
		}
		return stack.empty();
	}

	public static void main(String[] args) {
		Offer31_StackPushPopOrder order = new Offer31_StackPushPopOrder();
		int[] pushA = { 1, 2, 3, 4, 5 };
		int[] popA = { 4, 5, 3, 2, 1 };
		boolean b = order.isPopOrder(pushA, popA);
		System.out.println(b);
	}
}
