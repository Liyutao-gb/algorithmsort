程序员代码面试指南（第2版）
单调栈结构（Monotone Stack Structure）
给定一个不含有重复值的数组arr，找到每一个 i 位置左边和右边离 i 位置最近且
值比arr [i] 小的位置。返回所有位置相应的信息。

输入：arr = {3，4，1，5，6，2，7}；
输出：[ [-1,2]，[0,2]，[-1,-1]，[2,5]，[3,5]，[2,-1]，[5,-1] ]

Ⅰ.如果找到每一个i位置左边和右边离i位置最近且值比arr[i]小的位置，那么需要让
    stack从栈顶到栈底的位置所代表的值是严格递减的；
      Ⅱ.如果找到每一个i位置左边和右边离i位置最近且值比arr[i]大的位置，那么需要让
    stack从栈顶到栈底的位置所代表的值是严格减递增的；

准备一个栈stack，栈中存放的元素是数组下标。
1. 如果当前 栈空 或者 当前元素大于栈顶下标对应的元素，入栈；
2. 如果当前元素小于栈顶所对应的元素，弹出栈顶下标index，因此index左边距离
    最近 且 值比index对应元素值小的元素是，栈顶元素所对应值(栈空，记为-1)；
    右边距离最近 且 值比index对应元素值小的元素就是 当前遍历元素；然后继续
    弹出元素，直到栈空 或者 放入当前下标不会破坏栈从顶向底从大到小的顺序为止，
    最后放入当前下标继续遍历即可；
3. 遍历结束后，如果栈中还有元素，栈中所有元素，右边离元素位置最近且值比当
    前小的没有对应值，所以位置为-1。


代码如下：
package stack;

import java.util.Arrays;
import java.util.Stack;

public class MonotoneStackStructure {
	public static void main(String[] args) {
		int[] arr = { 3, 4, 1, 5, 6, 2, 7 };
		int[][] is = getNearLessNoRepeat(arr);
		for (int[] i : is) {
			System.out.println(Arrays.toString(i));
		}
	}

	/**
	 *  找到每一个i位置左边和右边最近且值比arr[i]小的数
	 *  维护一个从顶到底按从大到小的顺序
	 *  最后栈中还有数字，说明右边无比栈中数字小的数字，记为 -1
	 */
	public static int[][] getNearLessNoRepeat(int[] arr) {
		if (arr == null || arr.length <= 0)
			return new int[][] {};
		
		int[][] res = new int[arr.length][2];
		Stack<Integer> stack = new Stack<>();

		for (int i = 0; i < arr.length; i++) {
			while (!stack.isEmpty() &&  arr[i] < arr[stack.peek()]) {
				int cur = stack.pop();
				res[cur][0] = stack.isEmpty() ? -1 : stack.peek();
				res[cur][1] = i;
			}
			stack.push(i);
		}
		
		while (!stack.isEmpty()) {
			int cur = stack.pop();
			res[cur][0] = stack.isEmpty() ? -1 : stack.peek();
			res[cur][1] = -1;
		}
		return res;
	}
}
