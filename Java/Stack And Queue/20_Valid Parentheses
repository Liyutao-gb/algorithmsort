Leetcode  20
有效的括号（Valid Parentheses）
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。有效字
符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

输入: " ( { [ ] } ) "
输出: true

遍历字符串的每一个符号。
方法一：1. 遇到'('，'{'，'['，直接压入栈中；
2. 遇到')'，'}'，']' 就弹出栈中的符号和当前符号比较，如果弹出的符号和
    当前符号不匹配，就返回false。
方法二：1. 遇到'('，'{'，'['，符号，就把')'，'}'，']' 对应符号压入栈；
2. 遇到')'，'}'，']'  就弹出栈顶元素，如果栈空或者栈顶元素不等于当前元
    素，返回false。


代码如下：
package stack;

import java.util.Stack;
// 有效的括号
public class Main0020ValidParentheses {
	public static void main(String[] args) {
		System.out.println(new Solution20().isValid("([]()){}"));
	}
}

class Solution20 {
	public boolean isValid(String s) {
		Stack<Character> stack = new Stack<>();
		char[] c = s.toCharArray();
		
		for (int i = 0; i < c.length; i++) {
			if (c[i] == '(')
				stack.push(')');
			else if (c[i] == '[')
				stack.push(']');
			else if (c[i] == '{')
				stack.push('}');
			else if (stack.empty() || c[i] != stack.pop())
				return false;
		}
		return stack.empty();
	}
}

class Solution020 {
	public boolean isValid(String s) {
		if (s.length() % 2 != 0)
			return false;

		Stack<Character> stack = new Stack<>();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			switch (c) {
			case '(':
			case '[':
			case '{':
				stack.push(c);
				break;
			case ')':
				if (stack.empty() || stack.pop() != '(')
					return false;
				break;
			case ']':
				if (stack.empty() || stack.pop() != '[')
					return false;
				break;
			case '}':
				if (stack.empty() || stack.pop() != '{')
					return false;
				break;
			}
		}
		return stack.empty();
	}
}
