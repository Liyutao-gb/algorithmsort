Leetcode  239  滑动窗口最大值
59.滑动窗口的最大值（Maximum Value of The Sliding Window）
 给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。

输入: nums = [2, 3, 4, 2, 6, 2, 5, 1], 和 k = 3
输出: [4, 4, 6, 6, 6, 5] 

一个滑动窗口可以看成一个双端队列。放置所有可能是最大值的数字。
1. 如果遇到的数字比队列中所有的数字都大，那么它就是最大值；
2. 如果遇到的数字比队列中的所有数字都小，可能成为之后滑动窗口的最大值；
3. 如果遇到的数字比队列中最大值小，最小值大，将比它小数字不可能成为最大值；
4. 当一个数字的下标与当前数字的下标之差 >= 滑动窗口大小时，这个数字以及从
    窗口划出，可以从队列删除了。（队列存储下标的原因之一。）

注：队列中存放的是数组下标。最大值永远位于队列的头部。
Deque双端队列中removeFirst，removeLast，getFirst，getLast会抛出
NoSuchElementException
时间复杂度：O(n)

代码如下：
package com.lyt.java;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

public class Offer59_MaxInSlidingWindow {
	/**
	 * 1.先判断size - 1个元素
	 * 2.弹出队列尾元素,但凡num[deque.getLast()] < num[i]
	 * 3.最大值超过窗口大小,弹出队列头
	 */
	public List<Integer> maxInWindows(int[] num, int size) {
		if (num == null || num.length <= 0 || size <= 0 || size > num.length)
			throw new RuntimeException("输入不合法！");

		List<Integer> max = new ArrayList<>();
		Deque<Integer> deque = new ArrayDeque<>();
		for (int i = 0; i < size - 1; i++) {
			while (!deque.isEmpty() && num[i] > num[deque.getLast()]) {
				deque.removeLast();
			}
			deque.addLast(i);
		}

		for (int i = size - 1; i < num.length; i++) {
			while (!deque.isEmpty() && num[i] > num[deque.getLast()])
				deque.removeLast();
			if (!deque.isEmpty() && (i - deque.getFirst()) >= size)
				deque.removeFirst();
			deque.addLast(i);
			max.add(num[deque.getFirst()]);
		}

		return max;
	}

	public static void main(String[] args) {
		Offer59_MaxInSlidingWindow demo = new Offer59_MaxInSlidingWindow();
		int[] arr = new int[] { 2, 3, 4, 2, 6, 2, 5, 1 };
		List<Integer> maxInWindows = demo.maxInWindows(arr, 3);
		System.out.println(maxInWindows);
	}
}
