Leetcode  50  Pow(base，exponent)
16.数值的整数次方
实现函数double Power(double base, int exponent)，求base的exponent次方。不得
使用库函数，同时不需要考虑大数问题。(考虑exponent为负数的情况。首先对exponent
进行分类讨论，再对base是否为0进行讨论。)

这道题很容易实现，但需要注意以下陷阱：
1) 当exponent > 0，正常运算结果（递归和循环版本）；
2) 当exponent < 0，底数为0，0没有负数次幂；
3) 当exponent = 0，底数为0，0没有0次幂。
    指数右移一位，底数翻倍（base  *= base；）。

代码如下：
package com.lyt.java;

public class Offer16_Power {
	/**
	 * 方法一
	 */
	public double power(double x, int n) {
		double result;
		if (n > 0) {
			result = powerCore1(x, n);
		} else if (n < 0) {
			if (x == 0) {
				System.out.println("0没有负数次幂!");
				return 0;
			}
			result = 1 / powerCore1(x, -n);
		} else {
			if (x == 0) {
				System.out.println("0没有0次幂!");
			}
			return 1;
		}
		return result;
	}
	
	/**
	 * 循环
	 * exponent >>= 1死循环、exponent >>>= 1错误，比如：2.0  结果0.0
	 * 举例：10^1101 = 10^0001*10^0100*10^1000
	 * 		即10^1+10^4+10^8
	 */
	public double powerCore1(double base, int exponent) {
		double result = 1;
		while (exponent != 0) {
			if ((exponent & 0x1) == 1)
				result *= base;
			exponent /= 2;
			base *= base; // 指数右移一位，底数翻倍
		}
		return result;
	}
	
	/**
	 * 递归
	 */
	private double powerCore2(double x, int n) {
		if (n == 0)
			return 1;

		double result = powerCore2(x, n / 2);
		result *= result;
		if ((n & 0x1) == 1)
			result *= x;
		return result;
	}

	/**
	 * 方法二
	 */
	public double myPow(double x, int n) {
		double result = 1.0;
		for (int i = n; i != 0; i /= 2) {
			if ((i & 1) == 1)
				result *= x;
			x *= x;	 // 指数右移一位，底数翻倍
		}
		return n < 0 ? 1 / result : result;
	}

	public static void main(String[] args) {
		Offer16_Power demo = new Offer16_Power();
		System.out.print("0的6次方:");
		System.out.println(demo.power(0, 6));
		System.out.print("0的-6次方:");
		System.out.println(demo.power(0, -6));
		System.out.print("0的0次方:");
		System.out.println(demo.power(0, 0));
		System.out.print("2的6次方:");
		System.out.println(demo.power(2, 6));
		System.out.print("2的-3次方:");
		System.out.println(demo.power(2, -3));
		System.out.print("5的0次方:");
		System.out.println(demo.power(5, 0));
		System.out.print("-2的6次方:");
		System.out.println(demo.power(-2, 6));
		System.out.print("1的-2147483648次方:");
		System.out.println(demo.power(1, -2147483648));
		System.out.print("1的-2147483648次方:");
		System.out.println(demo.powerCore2(2, 5));
	}
}
