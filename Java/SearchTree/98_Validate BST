Leetcode  98
验证二叉搜索树（Validate Binary Search Tree）
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。

输入:
    	  2
   	 /  \
        1   3
输出: true

a. 迭代：中序遍历，设置一个前置指针pre，判断节点值是否是严格递增的。

b. 递归：递归地判断每个结点值是否是合理的，方法参数Integer类型。

代码如下：
package treesearch;

import java.util.Stack;
import tree.TreeNode;

public class Main0098ValidateBinarySearchTree {
	public static void main(String[] args) {
		TreeNode root = new TreeNode(2);
		TreeNode node1 = new TreeNode(1);
		TreeNode node2 = new TreeNode(3);
		root.left = node1;
		root.right = node2;
		boolean b = new Solution98().isValidBST(root);
		System.out.println(b);
	}
}

class Solution98 {
	public boolean isValidBST(TreeNode root) {
		return helper(root, null, null);
	}

	public boolean helper(TreeNode root, Integer low, Integer high) {
		if (root == null)
			return true;
		if (low != null && root.val <= low)	// <=
			return false;
		if (high != null && root.val >= high)
			return false;
		return helper(root.left, low, root.val) && helper(root.right, root.val, high);
	}
}

// 中序遍历
class Solution098 {
	public boolean isVaildBST(TreeNode root) {
		Stack<TreeNode> stack = new Stack<>();
		TreeNode pre = null;
		while (root != null || !stack.isEmpty()) {
			while (root != null) {
				stack.push(root);
				root = root.left;
			}
			root = stack.pop();
			if (pre != null && root.val <= pre.val)
				return false;
			pre = root;
			pre.val = root.val;
			root = root.right;
		}
		return true;
	}
}
