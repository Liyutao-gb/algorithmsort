Leetcode  148
排序链表（Sort List）
在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

输入： 4->2->1->3
输出：1->2->3->4

归并思想。
1. 先找到链表的中间节点；
2. 递归到左右两部分链表，直到递归到只有 一个结点 或者 空结点；
3. 先两两合并最小的链表，最后合并成一条排序好的链表。

代码如下：
package linkedlist;

class Solution148 {
	public ListNode sortList(ListNode head) {
		if (head == null || head.next == null)
			return head;
		
		ListNode fast = head.next, slow = head;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		
		ListNode tmp = slow.next;
		slow.next = null;
		
		ListNode left = sortList(head);
		ListNode right = sortList(tmp);
		
		ListNode h = new ListNode(0);
		ListNode res = h;
		while (left != null && right != null) {
			if (left.val < right.val) {
				h.next = left;
				left = left.next;
			} else {
				h.next = right;
				right = right.next;
			}
			h = h.next;
		}
		h.next = left != null ? left : right;
		return res.next;
	}
}
