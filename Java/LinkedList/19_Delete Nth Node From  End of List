Leetcode  19  删除链表的倒数第N个结点
 删除单链表和双向链表的倒数第N个结点（Delete Nth Node From End of List）
   分别实现两个函数，一个可以删除单链表中倒数第K个节点，另一个可以删除双链
表中倒数第K个节点。

输入： 1->2->3->4->5->NULL,  k = 2
输出： 1->2->3->5

删除单链表倒数第K个结点：
a. 删除从列表开头数起的第 (L−n+1) 个结点，其中 L 是列表的长度。只要我们找
    到列表的长度 L，这个问题就很容易解决。
b. 设置两个指针。
    1. 第一个指针先遍历K-1步；从第K步开始，第二个指针指向头结点，两个结点
同时往后遍历。
    2. 当第一个指针指向null时，说明不存在倒数第K个结点；
    3. 当第一个指针走到最后一个结点时，说明删除的是第一个结点；
    4. 当第一个指针走到倒数第二个结点时，第二个指针指向的正好是倒数第K + 1
个结点，删除倒数第K个结点即可。
c. 遍历链表从头到尾，每移动一步，K值减一。
    1. 如果K值大于0，说明不存在第K个结点；
    2. 如果K值等于0，说明链表倒数倒数第K个删除结点是头结点；
    3. 如果K值小于0，让指针重新指向头结点，每移动一步，K值加一，直到K值
 等于-1，这时指针正好指向倒数第K-1个结点。

删除双向链表中倒数第K个结点。和单链表类似。
1. 删除头结点。
    head = head.next;		head.last = null;
2. 正常删除节点。
    DoubleNode newNext = cur.next.next;	cur.next = newNext;
      	   if (newNext != null) 	newNext.last = cur;
	   
代码如下：

// 方法一：两个指针
class Solution19 {
	public ListNode removeNthFromEnd(ListNode head, int n) {
		if (head == null || n < 1)
			return head;

		ListNode fast = head;
		for (int i = 0; i < n - 1; i++) {
			fast = fast.next;
		}
		if (fast == null)
			return head;
		if (fast.next == null)
			return head.next;

		ListNode slow = head;
		while (fast.next.next != null) {
			fast = fast.next;
			slow = slow.next;
		}
		slow.next = slow.next.next;
		return head;
	}
}

// 删除第L-n+1个结点，从头开始遍历，找到第L-n个结点
class Solution0019 {
	public ListNode removeNthFromEnd(ListNode head, int n) {
		if (head == null || n <= 0)
			return head;

		int length = 0;
		ListNode cur = head;
		while (cur != null) {
			length++;
			cur = cur.next;
		}
		if (n > length)
			return head;
		if (n == length)
			return head.next;

		length -= n;
		cur = head;
		for (int i = 1; i < length; i++) {
			cur = cur.next;
		}
		cur.next = cur.next.next;
		return head;
	}
}

// 方法二
class Solution019 {
	public ListNode removeNthFromEnd(ListNode head, int n) {
		if (head == null || n <= 0)
			return head;

		int length = 0;
		ListNode cur = head;
		while (cur != null) {
			length++;
			cur = cur.next;
		}
		if (n > length)
			return head;
		if (n == length)
			return head.next;

		length -= n;
		cur = head;
		for (int i = 1; i < length; i++) {
			cur = cur.next;
		}
		cur.next = cur.next.next;
		return head;
	}
}

// 双向链表删除倒数第N个节点
class Solution00019 {
	public DoubleNode removeNthFromEnd(DoubleNode head, int n) {
		if (head == null || n < 1)
			return head;

		DoubleNode cur = head;
		while (cur != null) {
			n--;
			cur = cur.next;
		}
		if (n > 0)
			return head;
		if (n == 0) {
			head = head.next;
			head.last = null;
			return head;
		}

		cur = head;
		while (n < -1) {
			n++;
			cur = cur.next;
		}
		// cur → cur.next → newNext
		DoubleNode newNext = cur.next.next;
		cur.next = newNext;
		if (newNext != null) {
			newNext.last = cur;
		}
		return head;
	}
}
