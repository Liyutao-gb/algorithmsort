Leetcode 260  只出现一次的数字Ⅲ
56.（1）数组中只出现一次的两个数字
  一个整型数组里除了两个数字之外，其他数字都出现了两次。请写程序找出这
两个只出现一次的数字。	

输入: [1,2,1,3,2,5]	
输出: [3,5]

数组中有两个数字只出现一次，如果能够将数组分为两部分，两部分中都只有一个
数字只出现一次，那么就可以解决该问题了。

1. 从头到尾异或每个数字，最后得到两个只出现一次数字的异或结果；
2. 因为两个数字不一样，所以异或结果必定有一位为1，记为第n位；
a. 求出第一位为1的十进制数字，int mask = xor & (-xor);
    0000	1010	 10
 &	 1111	0110	-10
    0000	0010	mask

 b. 求出第一位为1是第几位
3. 根据第n位 是1还是0 将数组划分为两部分（两个相同的数字会被分到一起，两个
    只出现一次的数字会被分到不同的数组）；
 	a. if ((i & mask) == mask) 	
  b. if ((i & 1) == 1) 
4. 最后将两部分数组各自异或，最后得到两个只出现一次的数字。


代码如下：
package bitmanipulation;

public class Main0260只出现一次的数字Ⅲ {
	public static void main(String[] args) {
		int[] arr = { 1, 2, 1, 3, 2, 5 };
		int[] is = new Solution260().singleNumber(arr);
		for (int i : is) {
			System.out.print(i + " ");
		}
	}
}

class Solution260 {
	public int[] singleNumber(int[] nums) {
		int xor = 0;
		for (int i : nums)// 一样的抵消,不一样的两个数字异或运算结果必定有一位是1
			xor ^= i;

		int mask = xor & (-xor);

		int[] ans = new int[2];
		for (int i : nums) {
			if ((i & mask) == 0)// == 0、 == mask 两种结果
				ans[0] ^= i;
			else
				ans[1] ^= i;
		}

		return ans;
	}
}

class Solution0260 {
	public int[] singleNumber(int[] nums) {
		int num = 0;
		for (int i : nums)// 一样的抵消,不一样的两个数字 异或运算结果必定有一位是1
			num ^= i;

		int bit = bitOne(num);// 两个不一样数字异或后至少有一位不同,以此将它们分成两个数组

		int[] isOne = new int[nums.length];
		int[] isNo = new int[nums.length];
		int one = 0, no = 0;
		for (int i = 0; i < nums.length; i++) {
			int n = nums[i];
			if (isOne(n, bit)) {
				isOne[one++] = nums[i];
			} else {
				isNo[no++] = nums[i];
			}
		}

		int[] res = new int[2];
		for (int i : isOne)
			res[0] ^= i;
		for (int i : isNo)
			res[1] ^= i;

		return res;
	}

	public boolean isOne(int num, int bit) {
		int n = num >> bit;
		return (n & 1) == 1;
	}

	public int bitOne(int num) {
		int index = 0;
		while (num != 0) {
			if ((num & 1) == 1)
				break;
			num >>= 1;
			index++;
		}
		return index;
	}
}
