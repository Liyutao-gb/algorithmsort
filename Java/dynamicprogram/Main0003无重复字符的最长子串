package dynamicprogram;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Main0003无重复字符的最长子串 {
	public static void main(String[] args) {
		System.out.println(new Solution3().lengthOfLongestSubstring("abcdcoia"));
	}
}

class Solution003 {
	public int lengthOfLongestSubstring(String s) {
		int n = s.length(), ans = 0;
		int[] index = new int[128]; // current index of character
		// try to extend the range [i, j]
		for (int j = 0, i = 0; j < n; j++) {
			i = Math.max(index[s.charAt(j)], i);
			ans = Math.max(ans, j - i + 1);
			index[s.charAt(j)] = j + 1;
		}
		return ans;
	}
}

// Sliding Window 滑动窗口
class Solution03 {
	public int lengthOfLongestSubstring(String s) {
		Set<Character> set = new HashSet<>();
		int ans = 0, start = 0, end = 0;
		while (start < s.length() && end < s.length()) {
			if (!set.contains(s.charAt(end))) {
				set.add(s.charAt(end++));
				ans = Math.max(ans, set.size());
			} else {
				set.remove(s.charAt(start++));
			}
		}
		return ans;
	}
}

// 优化的 Sliding Window
class Solution3 {
	public int lengthOfLongestSubstring(String s) {
		int n = s.length(), ans = 0;
		Map<Character, Integer> map = new HashMap<>();// current index of
														// character
		for (int j = 0, i = 0; j < n; j++) {
			if (map.containsKey(s.charAt(j))) {
				i = Math.max(map.get(s.charAt(j)), i);
			}
			ans = Math.max(ans, j - i + 1);
			map.put(s.charAt(j), j + 1);
		}
		return ans;
	}
}
