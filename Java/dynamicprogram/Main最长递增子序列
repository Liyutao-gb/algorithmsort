package dynamicprogram;

public class Main最长递增子序列 {
	public static void main(String[] args) {
		int[] arr = {2,1,5,3,6,4,8,9,7};
		print(arr);
		int[] getdp1 = getdp1(arr); // 时间复杂度 (n平方)
		int[] getdp2 = getdp2(arr);	// 时间复杂度 (nlogn)
		int[] lis = getLIS(arr);
		print(lis);
	}
	
//	 动态的获得一个dp数组,如果长递增子序列以arr[i]结尾,那么在arr[0...i-1]中所有比arr[i]
//	小的数都可以作为倒数第二个数。在这么多倒数第二个数的选择中，以哪个数结尾的最大递增
//	子序列更大，就选哪个数作为倒数第二个数，所以
//	dp[i] = max{ dp[j] + 1 (0<=j<i, arr[j] < arr[i])}
	public static int[] getdp1(int[] arr){
		int[] dp = new int[arr.length];
		for (int i = 0; i < dp.length; i++) {
			dp[i] = 1;
			for (int j = 0; j < i; j++) { // 从0-i下标中找当前位置的最大递增子序列
				if(arr[i] > arr[j]){
					dp[i] = Math.max(dp[i], dp[j] + 1);
				}
			}
		}
		return dp;
	}
	
	// 原数组：2,1,5,3,6,4,8,9,7
	// ends辅助数组，结果：1,3,4,7,9    递增替换数组
	public static int[] getdp2(int[] arr){
		int[] dp = new int[arr.length];
		int[] ends = new int[arr.length];
		ends[0] = arr[0];
		dp[0] = 1;
		int right = 0;
		for (int i = 0; i < arr.length; i++) {
			int l = 0;
			int r = right;
			while (l <= r) {
				int m = (l + r) / 2;
				if(arr[i] > ends[m])
					l = m + 1;
				else
					r = m - 1;
			}
			right = Math.max(right, l);
			ends[l] = arr[i];
			dp[i] = l + 1;
		}
		return dp;
	}
	
	public static int[] getLIS(int[] arr){
		int[] dp = getdp1(arr);
//		 找到dp数组中最大递增子序列的长度以及下标
		int len = dp[0];
		int index = 0;
		for (int i = 1; i < dp.length; i++) {
			if(len < dp[i]) {
				len = dp[i];
				index = i;
			}
		}
		int[] lis = new int[len];
		lis[--len] = arr[index]; // 下标对应的为  最长递增子序列  的最后一个元素
		for (int i = index; i >= 0; i--) {
//			如果对于某一个位置i,既有arr[i] < arr[7],又有dp[i]==dp[7]-1，说明arr[i]可以
//			作为最长递增子序列的倒数第二个数。
			if(arr[i] < arr[index] && dp[i] == dp[index] - 1) {
				lis[--len] = arr[i];
				index = i;
			}
		}
		return lis;
	}
	
	static void print(int[] arr){
		for (int i : arr) {
			System.out.print(i +" ");
		}
		System.out.println();
	}
}
